/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProductRequest,
  MessageResponse,
  ProductResponse,
  UpdateProductRequest,
} from '../models/index';
import {
    CreateProductRequestFromJSON,
    CreateProductRequestToJSON,
    MessageResponseFromJSON,
    MessageResponseToJSON,
    ProductResponseFromJSON,
    ProductResponseToJSON,
    UpdateProductRequestFromJSON,
    UpdateProductRequestToJSON,
} from '../models/index';

export interface CreateProductOperationRequest {
    createProductRequest: CreateProductRequest;
}

export interface DeleteProductByIdRequest {
    id: string;
}

export interface GetProductByIdRequest {
    id: string;
}

export interface GetProductsRequest {
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface UpdateProductByIdRequest {
    id: string;
    updateProductRequest: UpdateProductRequest;
}

/**
 * ProductApi - interface
 * 
 * @export
 * @interface ProductApiInterface
 */
export interface ProductApiInterface {
    /**
     * Create a product
     * @summary 
     * @param {CreateProductRequest} createProductRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    createProductRaw(requestParameters: CreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductResponse>>;

    /**
     * Create a product
     * 
     */
    createProduct(requestParameters: CreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductResponse>;

    /**
     * Delete a product by id
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    deleteProductByIdRaw(requestParameters: DeleteProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>>;

    /**
     * Delete a product by id
     * 
     */
    deleteProductById(requestParameters: DeleteProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse>;

    /**
     * Get a product by id
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    getProductByIdRaw(requestParameters: GetProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductResponse>>;

    /**
     * Get a product by id
     * 
     */
    getProductById(requestParameters: GetProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductResponse>;

    /**
     * Get products with pagination
     * @summary 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    getProductsRaw(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductResponse>>>;

    /**
     * Get products with pagination
     * 
     */
    getProducts(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductResponse>>;

    /**
     * Update a product by id
     * @summary 
     * @param {string} id 
     * @param {UpdateProductRequest} updateProductRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    updateProductByIdRaw(requestParameters: UpdateProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductResponse>>;

    /**
     * Update a product by id
     * 
     */
    updateProductById(requestParameters: UpdateProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductResponse>;

}

/**
 * 
 */
export class ProductApi extends runtime.BaseAPI implements ProductApiInterface {

    /**
     * Create a product
     * 
     */
    async createProductRaw(requestParameters: CreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductResponse>> {
        if (requestParameters['createProductRequest'] == null) {
            throw new runtime.RequiredError(
                'createProductRequest',
                'Required parameter "createProductRequest" was null or undefined when calling createProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/product`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductRequestToJSON(requestParameters['createProductRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductResponseFromJSON(jsonValue));
    }

    /**
     * Create a product
     * 
     */
    async createProduct(requestParameters: CreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductResponse> {
        const response = await this.createProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a product by id
     * 
     */
    async deleteProductByIdRaw(requestParameters: DeleteProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteProductById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/product/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseFromJSON(jsonValue));
    }

    /**
     * Delete a product by id
     * 
     */
    async deleteProductById(requestParameters: DeleteProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponse> {
        const response = await this.deleteProductByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a product by id
     * 
     */
    async getProductByIdRaw(requestParameters: GetProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getProductById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/product/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductResponseFromJSON(jsonValue));
    }

    /**
     * Get a product by id
     * 
     */
    async getProductById(requestParameters: GetProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductResponse> {
        const response = await this.getProductByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get products with pagination
     * 
     */
    async getProductsRaw(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/product`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductResponseFromJSON));
    }

    /**
     * Get products with pagination
     * 
     */
    async getProducts(requestParameters: GetProductsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductResponse>> {
        const response = await this.getProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a product by id
     * 
     */
    async updateProductByIdRaw(requestParameters: UpdateProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateProductById().'
            );
        }

        if (requestParameters['updateProductRequest'] == null) {
            throw new runtime.RequiredError(
                'updateProductRequest',
                'Required parameter "updateProductRequest" was null or undefined when calling updateProductById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/product/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProductRequestToJSON(requestParameters['updateProductRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductResponseFromJSON(jsonValue));
    }

    /**
     * Update a product by id
     * 
     */
    async updateProductById(requestParameters: UpdateProductByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductResponse> {
        const response = await this.updateProductByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
